import type { CancelFunction, JSONValue, ModuleKind, RpcResponse, RpcRequestFull, RpcResponseFull } from './types';
export interface RpcTransport {
    sendRequest(request: RpcRequestFull): void;
    destroy(): void;
}
export interface RpcTransportInit {
    init(onRpcResponse: (response: RpcResponseFull) => void): Promise<RpcTransport>;
}
export declare class RpcClient {
    private transport?;
    private transportInit;
    private requestCounter;
    private requestCallbacks;
    private initPromise?;
    private clientName;
    constructor(transportInit: RpcTransportInit);
    private initializeInner;
    initialize(): Promise<void>;
    private handleWorkerMessage;
    joinFederation(inviteCode: string, clientName: string): Promise<void>;
    openClient(clientName: string): Promise<void>;
    closeClient(clientName: string): Promise<void>;
    private internalRpcStream;
    private internalRpcSingle;
    rpcStream<Response extends JSONValue = JSONValue, Body extends JSONValue = JSONValue>(module: ModuleKind, method: string, body: Body, onData: (data: Response) => void, onError: (error: string) => void, onEnd?: () => void): CancelFunction;
    rpcSingle<T extends JSONValue = JSONValue, P extends JSONValue = JSONValue>(module: string, method: string, payload: P): Promise<T>;
    cleanup(): Promise<void>;
    _getRequestCounter(): number;
    _getRequestCallbackMap(): Map<number, (response: RpcResponse) => void>;
}
//# sourceMappingURL=rpc.d.ts.map