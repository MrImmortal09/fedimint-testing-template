import type { CancelFunction, RpcResponse, JSONValue } from '../types';
export interface Subscription<T extends JSONValue = JSONValue> {
    id: number;
    onData: (data: T) => void;
    onError: (error: string) => void;
    onEnd: () => void;
    cancelFn: CancelFunction;
}
export declare class SubscriptionManager {
    private subscriptions;
    private cancelRequest;
    constructor(cancelRequest: (requestId: number) => void);
    addSubscription<T extends JSONValue = JSONValue>(id: number, onData: (data: T) => void, onError: (error: string) => void, onEnd?: () => void): CancelFunction;
    handleResponse(requestId: number, response: RpcResponse): void;
    cancelSubscription(id: number): void;
    private removeSubscription;
    cancelAll(): void;
    clear(): void;
    getActiveSubscriptionCount(): number;
    getActiveSubscriptionIds(): number[];
}
//# sourceMappingURL=SubscriptionManager.d.ts.map